5+5
temp_var = 5+5
x <- 1
x <- 1
a <- "Hello"
b <- a
a <- "Goodbye"
schools <- c("UCLA", "UC Berkeley", "USC")
numbers <- c(1, 2, 3, 4, 5)
numbers * 2
schools[2]
knitr::opts_chunk$set(echo = TRUE)
pawnee <- read.csv("pawnee.csv")
n <- 30 #sample siz
N <- 541
M <- 1000
phats <- numeric(M)
set.seed(123)
for(i in seq_len(M)){
index <- sample(N, size = n)
sample_i <- pawnee[index, ]
phats[i] <- mean(sample_i$New_hlth_issue == "Y")
}
hist(phats, probability = TRUE, main = "Sampling Distribution of Sample Proportions", xlab = "Proportion", col = "lightblue")
curve(dnorm(x, mean(phats), sd(phats)), add = TRUE, col = "red", lwd = 2)
# (a) Probability of newborn <= 18 inches
mean_length <- 19.2
sd_length <- 0.7
prob_less_18 <- pnorm(18, mean = mean_length, sd = sd_length)
prob_less_18
# Standard error
standard_error <- sqrt((p_hat * (1 - p_hat)) / n)
# Expected sample proportion
p_hat <- 0.58
n <- 100
expected_value <- p_hat
expected_value
# Standard error
standard_error <- sqrt((p_hat * (1 - p_hat)) / n)
standard_error
n <- 800
p_hat <- 0.82
standard_error <- sqrt((p_hat * (1 - p_hat)) / n)
confidence_interval <- c(p_hat - 1.96 * standard_error, p_hat + 1.96 * standard_error)
confidence_interval
# Verifying the CLT conditions
np <- n * p
p <- 0.58  # proportion of people who watch television primarily through streaming
n <- 300   # sample size
# Expected percentage
expected_percentage <- p * 100
expected_percentage
# Verifying the CLT conditions
np <- n * p
nq <- n * (1 - p)
# Check if np >= 10 and nq >= 10
np >= 10
nq >= 10
# Given proportion
p_hat <- 0.58
n <- 300
p_hat * 100
# Check CLT conditions
np <- n * p_hat
nq <- n * (1 - p_hat)
np
nq
p_sample <- 181 / n
z_score <- (p_sample - p_hat) / SE
# Standard error calculation
SE <- sqrt(p_hat * (1 - p_hat) / n)
SE
p_sample <- 181 / n
z_score <- (p_sample - p_hat) / SE
z_score
# Compute probability of getting this value or higher
p_value <- 1 - pnorm(z_score)
p_value
# Z-score for p-hat = 0.65
p_hat <- 0.65
z <- (p_hat - p) / std_dev
# Compute probability
p_65 <- 1 - pnorm((0.65 - p_hat) / SE)
p_65
# Z-score for p-hat = 0.65
p_hat <- 0.65
z <- (p_hat - p) / SE
# Probability corresponding to z-score
probability <- 1 - pnorm(z)
probability
# Critical value for 95% confidence
z_critical <- qnorm(0.975)
# Standard error of the sample proportion
se <- sqrt(p_5 * (1 - p_5) / n_5)
# Given information
p_5 <- 0.82  # proportion of people who believe protecting the rights of those with unpopular views is important
n_5 <- 800    # sample size
# Verifying the CLT conditions for Exercise 5
np_5 <- n_5 * p_5
nq_5 <- n_5 * (1 - p_5)
# Check if np >= 10 and nq >= 10
np_5 >= 10
nq_5 >= 10
# Critical value for 95% confidence
z_critical <- qnorm(0.975)
# Standard error of the sample proportion
se <- sqrt(p_5 * (1 - p_5) / n_5)
# Confidence interval
lower_bound <- p_5 - z_critical * se
upper_bound <- p_5 + z_critical * se
c(lower_bound, upper_bound)
# Critical value for 90% confidence
z_critical_90 <- qnorm(0.95)
# Standard error for 90% CI
se_90 <- sqrt(p_5 * (1 - p_5) / n_5)
# Confidence interval for 90% CI
lower_bound_90 <- p_5 - z_critical_90 * se_90
upper_bound_90 <- p_5 + z_critical_90 * se_90
c(lower_bound_90, upper_bound_90)
# Z-score for p-hat = 0.65
p_hat <- 0.65
z <- (p_hat - p) / SE
# Probability corresponding to z-score
probability <- 1 - pnorm(z)
probability
# Given proportion
p_hat <- 0.58
n <- 300
p <- 0.58
p_hat * 100
# Z-score for p-hat = 0.65
p_sample <- 0.65
z <- (p_sample - p_hat) / SE
# Probability corresponding to z-score
probability <- 1 - pnorm(z)
probability
# (c) Percentage not fitting in 18-20.4 inches
prob_not_fit <- pnorm(18, mean = mean_length, sd = sd_length) + (1 - pnorm(20.4, mean = mean_length, sd = sd_length))
prob_not_fit
p_hat <- 0.58  # Sample proportion
n <- 300  # Sample size
p_sample <- 181 / n  # Observed sample proportion
SE <- sqrt(p_hat * (1 - p_hat) / n)
# Compute Z-score
z_score <- (p_sample - p_hat) / SE
# Compute probability (p-value)
p_value <- 1 - pnorm(z_score)
cat("Z-score:", round(z_score, 2), "\n")
cat("P-value:", round(p_value, 4), "\n")
p_hat <- 0.58  # Sample proportion
n <- 300  # Sample size
p_sample <- 181 / n  # Observed sample proportion
# Compute Standard Error (SE)
SE <- sqrt((p_hat * (1 - p_hat)) / n)  # Ensure correct parentheses placement
# Compute Z-score
z_score <- (p_sample - p_hat) / SE  # Ensure values are correctly used
# Compute probability (p-value)
p_value <- 1 - pnorm(z_score)
cat("Z-score:", round(z_score, 2), "\n")
cat("P-value:", round(p_value, 4), "\n")
cat("Standard Error:", round(SE, 5), "\n")
# Given proportion
p_hat <- 0.58
n <- 300
p_hat * 100
# Check CLT conditions
np <- n * p_hat
nq <- n * (1 - p_hat)
np
nq
#p_hat <- 0.58  # Sample proportion
#n <- 300  # Sample size
p_sample <- 181 / n  # Observed sample proportion
# Compute Standard Error (SE)
SE <- sqrt((p_hat * (1 - p_hat)) / n)  # Ensure correct parentheses placement
# Compute Z-score
z_score <- (p_sample - p_hat) / SE  # Ensure values are correctly used
# Compute probability (p-value)
p_value <- 1 - pnorm(z_score)
cat("Z-score:", round(z_score, 2), "\n")
cat("P-value:", round(p_value, 4), "\n")
cat("Standard Error:", round(SE, 5), "\n")
p_hat <- 0.58  # Population proportion
n <- 300  # Sample size
p_sample <- 181 / n  # Observed sample proportion
# Compute Correct Standard Error (SE)
SE <- sqrt((p_hat * (1 - p_hat)) / n)
# Compute Correct Z-score
z_score <- (p_sample - p_hat) / SE
# Compute Correct Probability (P-value)
p_value <- 1 - pnorm(z_score)
# Print Corrected Results
cat("Corrected Sample Proportion:", round(p_sample, 4), "\n")
cat("Corrected Standard Error:", round(SE, 5), "\n")
cat("Corrected Z-score:", round(z_score, 2), "\n")
cat("Corrected P-value:", round(p_value, 4), "\n")
p_sample <- 181 / n  # Observed sample proportion
SE <- sqrt((p_hat * (1 - p_hat)) / n)
z_score <- (p_sample - p_hat) / SE
p_value <- 1 - pnorm(z_score)
cat("Z-score:", round(z_score, 3), "\n")
cat("P-value:", round(p_value, 5), "\n")
pawnee <- read.csv("pawnee.csv", header = TRUE)
head(pawnee)
dim(pawnee)
setwd("~/Desktop/stats10/Assignment5")
pawnee <- read.csv("pawnee.csv", header = TRUE)
head(pawnee)
dim(pawnee)
set.seed(1337)
sample_pawnee <- pawnee[sample(nrow(pawnee), 30), ]
head(sample_pawnee)
prop_sample <- mean(sample_pawnee$New_hlth_issue == "Y")
prop_population <- mean(pawnee$New_hlth_issue == "Y")
prop_sample
prop_population
n <- 30
p_hat <- prop_sample
se <- sqrt(p_hat * (1 - p_hat) / n)
z_90 <- qnorm(0.95)
ci90 <- c(p_hat - z_90 * se, p_hat + z_90 * se)
z_95 <- qnorm(0.975)
ci95 <- c(p_hat - z_95 * se, p_hat + z_95 * se)
z_99 <- qnorm(0.995)
ci99 <- c(p_hat - z_99 * se, p_hat + z_99 * se)
ci90
ci95
ci99
flint <- read.csv("flint.csv", header = TRUE)
flint <- read.csv("flint.csv", header = TRUE)
flint$dangerous <- ifelse(flint$lead >= 15, 1, 0)
flint <- read.csv("flint.csv", header = TRUE)
flint$dangerous <- ifelse(flint$lead >= 15, 1, 0)
flint <- read.csv("flint.csv", header = TRUE)
n <- dim(flint)[1]
p_null <- 0.1
flint <- read.csv("flint.csv", header = TRUE)
n <- dim(flint)[1]
p_null <- 0.1
p_hat <- mean(flint$Pb >= 15)
sample_sd <- sqrt(p_hat * (1 - p_hat) / n)
p_hat
sample_sd
# Standard error using the null hypothesis proportion p0 = 0.10
se_flint <- sqrt(p_null * (1 - p_null) / n)
# Calculate the z-value
z_value <- (p_hat - p_null) / se_flint
z_value
# For a one-sided test (p > 0.10)
p_value <- 1 - pnorm(z_value)
p_value
p_value <= 0.5
# Data for 2016
n1 <- 3103
x1 <- 2087
p1 <- x1 / n1
# Data for 2017
n2 <- 2988
x2 <- 1930
p2 <- x2 / n2
# Pooled proportion (under H0: p1 = p2)
p_pool <- (x1 + x2) / (n1 + n2)
# Standard error using the pooled proportion
se_diff <- sqrt(p_pool * (1 - p_pool) * (1/n1 + 1/n2))
# Calculate the z-statistic
z_college <- (p1 - p2) / se_diff
z_college
# Two-tailed p-value
p_value_college <- 2 * (1 - pnorm(abs(z_college)))
p_value_college
# Standard error for the difference (using separate variances)
se_diff_np <- sqrt((p1 * (1 - p1) / n1) + (p2 * (1 - p2) / n2))
# 95% Confidence Interval for the difference (p1 - p2)
ci_diff_lower <- (p1 - p2) - 1.96 * se_diff_np
ci_diff_upper <- (p1 - p2) + 1.96 * se_diff_np
ci_diff <- c(ci_diff_lower, ci_diff_upper)
ci_diff
View(flint)
